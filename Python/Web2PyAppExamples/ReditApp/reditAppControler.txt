# -*- coding: utf-8 -*-
#http://hostname/app/default/index
#http://hostname/app/default/<function>/<category> ->http://hostname/app/default/create_post/<category>
#sushto i http://hostname/app/default/list_post_by_datetime/<category>/<page>
#http://hostname/app/default/<function>/<category>/id ->http://hostname/app/default/edit_post/2
#http://hostname/app/default/list_post_by_author/user_id->
#adresi na callback http://hostname/app/default/view_post/<category>/<id>
#vote post http://hostname/app/default/view_post/<category>/<id>/<vote up or down>
POSTS_PER_PAGE = 10

def get_category():
    category_name = request.args(0) #zima 1via arg ot url-to
    category = db.category(name=category_name) #tursy v db ima li takava cat i ako ima ia zima
    #proverka dali sushtestvuva cat s tuy ime
    if not category:
        session.flash = 'Category not found!'
        redirect(URL('index'))
    return category

def index():
    rows = db(db.category).select()
    return locals()

@auth.requires_login()
def create_post():
    category=get_category()
    db.post.category.default = category.id
    form = SQLFORM(db.post).process(next='view_post/[id]') #kat submitne formata da otide na view_post s id, id-to na recorda det toku shto e suzdal
    return locals()

@auth.requires_login()
def edit_post():
    id = request.args(0, cast=int)
    form = SQLFORM(db.post, id, showid=False).process(next='view_post/[id]')
    return locals()

def list_posts_by_datetime():
    response.view = 'default/list_posts_by_votes.html' #kazvam mu che viewto mu e 'default', za da ne tursi drugo
    category=get_category()
    page = request.args(1, cast=int, default=0) #tva shte ni e page numbera
    start = page*POSTS_PER_PAGE
    stop = start + POSTS_PER_PAGE
    rows = db(db.post.category==category.id).select(orderby=~db.post.created_on,limitby=(start,stop))
    return locals()

def list_posts_by_votes():
    category=get_category()
    page = request.args(1, cast=int, default=0) #stranicite pochvat ot 1
    start = page*POSTS_PER_PAGE
    stop = start + POSTS_PER_PAGE
    rows = db(db.post.category==category.id).select(orderby=~db.post.votes,limitby=(start,stop))
    return locals()

def list_posts_by_author():
    response.view = 'default/list_posts_by_votes.html'
    user_id = request.args(0,cast=int)
    page = request.args(1, cast=int, default=0)
    start = page*POSTS_PER_PAGE
    stop = start + POSTS_PER_PAGE
    rows = db(db.post.created_by==user_id).select(orderby=~db.post.created_on,limitby=(start,stop))
    return locals()

def view_post():
    id = request.args(0, cast=int)
    post = db.post(id) or redirect(URL('index')) #ako niama post shte redirektne kum index
    comments = db(db.comm.post==post.id).select(orderby=~db.comm.created_on)
    if auth.user:
        db.comm.post.default=id
        db.comm.parent_comm.default = comment.id if comment else None

        form = SQLFORM(db.comm).process()
    else:
        form = A("login o comment", _href= URL('user/login', vars=dict(_next=URL(args=request.args))))
    comments = db(db.comm.post == post.id).select(orderby=db.comm.created_on)
    return locals()
#http://hostname/app/controler/vote_callback?id=2&direction=up
#
def vote_callback():
    vars = request.post_vars #request.post_vars taka zima post
    print vars
    if vars and auth.user: #s auth.user pozvoliavame samo na lognati da glasuvat
        id = vars.id
        direction = +1 if vars.direction == 'up' else -1
        post = db.post(id)
        if post:
            vote = db.vote(post=id,created_by=auth.user.id) #predotvratiavame 2puti da se glasuva, kato proveriavame dali v db ima veche neshto ot tozi user
        if not vote: #ako niamame vote
                post.update_record(votes = post.votes+direction)
                db.vote.insert(post=id, score=direction)
        elif vote.score!=direction: #ako imame vote ama e glasuval down a sega glasuva up
                post.update_record(votes=post.votes+direction)
                vote.update_record(score=direction)
        else:
                pass #voter votred twice in same direction
        print post.votes
    return str(post.votes)

def comm_vote_callback():
    id = request.args(0, cast=int)
     ##todo
    return locals()

def list_posts_new():
    return locals()


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()
