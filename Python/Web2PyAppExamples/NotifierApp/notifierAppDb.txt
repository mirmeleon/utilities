# -*- coding: utf-8 -*-
# notifierApp db

import datetime
week = datetime.timedelta(days=7) #definirame si 1 sedmica; timedelta e parsvaneto za days na pyton
STATUSES = ('assigned', 'accepted', 'rejected', 'reassigned', 'complete')

db.define_table('task',
                Field('title',requires=IS_NOT_EMPTY()),
                Field('description','text'),
                Field('assigned_to', 'reference auth_user'), #referirame users db
                Field('status', requires=IS_IN_SET(STATUSES),default=STATUSES[0]),
                Field('deadline', 'date', default=request.now+week),
                auth.signature)

db.define_table('post',
               Field('task', 'reference task'),
               Field('body', 'text', requires=IS_NOT_EMPTY()),
                     auth.signature)

auth.enable_record_versioning(db)

db.task.created_on.represent = lambda v, row:prettydate(v)
db.task.deadline.represent = lambda v, row: SPAN(prettydate(v), _class='overdue' if v and v<datetime.date.today() else None)

def fullName(user_id):
    if user_id is None:
        return "Unknown"
    return "%(first_name)s %(last_name)s (#%(id)s)" % db.auth_user(user_id)

def show_status(status, row=None):
    return SPAN(status, _class=status)

db.task.status.represent = show_status

#db(db.task).delete()
#from gluon.contrib.populate import populate
#populate(db.task, 10)

#funkcia det prashta maila
def send_email(to, subject, message, sender):
    if not isinstance(to,list): to= [to] #ako ne e obekt ot lista go napravi
    # if auth.user: to = [email for email in to if not to==auth.user.email] #mahame avtora ot lista emajli det prashtame
    # if True or email_to != me: #for debugging
    mail.settings.sender = sender
    mail.send(to=to,
             subject=subject,
             message=message or '(no message)')
