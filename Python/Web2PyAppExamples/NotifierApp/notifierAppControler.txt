# -*- coding: utf-8 -*- controler
me= auth.user_id

def index():
    if auth.user:redirect(URL('tasks'))
    return dict(message=T('Welcome to web2py!'))

@auth.requires_login()
def tasks():
      db.task.created_on.readable = True
      db.task.created_by.readable = True
      db.task.title.represent = lambda title,row:A(title, _href=URL('view_task', args=row.id))
      query = (db.task.assigned_to == me) | (db.task.created_by==me)
      grid = SQLFORM.grid(query, orderby=~db.task.modified_on, create=False, details=False, editable=False, deletable=lambda row:(row.created_by==me),
                          fields=[
                db.task.status,
                db.task.title,
                db.task.created_on,
                db.task.deadline,
                db.task.created_by,
                db.task.assigned_to,
            ],
                links=[
        lambda row: A('view task',_href=URL('view_task', args=row.id),_class="btn btn-warning")
        ])
      return locals()

@auth.requires_login()
def create_task():
    db.task.status.writable = False
    db.task.status.readable = False
    form = SQLFORM(db.task).process()
    if form.accepted:
          #vikame metoda ot db1.py send_email
          send_email(to=db.auth_user(form.vars.assigned_to).email,sender=auth.user.email,
                       subject="New task: %s assigned to you" %form.vars.title, message=form.vars.description)
          redirect(URL('tasks'))
    return locals()

@auth.requires_login()
def view_task():
    task_id = request.args(0, cast=int) #kastvame kum int; zimame id-to na taska
    task = db.task(task_id) or redirect(URL('index'))
    if not task.created_by==me and not task.assigned_to==me: error() #ako ne sum az suzdatelia ili ne e assigneta kum men vikame error
    db.post.task.default = task.id #kazvame mu defaultnata stoynost ti e =na id
    db.post.task.writable = False
    db.post.task.readable = False
    form = SQLFORM(db.post).process()
    posts = db(db.post).select(orderby=db.post.created_by)
    return locals()

def error(message="not authorized"):
    session.flash = message
    redirect(URL('tasks'))
    return locals()

@auth.requires_login()
def edit_task():
    task_id = request.args(0, cast=int)
    task = db.task(task_id) or error()
    if not task.created_by==me and not task.assigned_to==me: error() #ako ne sum az suzdatelia ili ne e assigneta kum men vikame error
    if task.created_by==me:
         task.assigned_to.writable = True #demek ako az sum ia suzdala moga da ia assigna na niakoy drug
    else:
         task.assigned_to.writable = False
         task.status.requires=IS_IN_SET(('accepted', 'rejected', 'completed'))
        #moje da se iztrie samo ot avtora deletable=..
    form = SQLFORM(db.task, task,showid=False,
                   deletable=(task.created_by==me)).process() #1vi arg e db tablica, 2ri e konkretnia task
    if form.accepted:
        email_to = db.auth_user(form.vars.assigned_to if task.created_by==me else task.created_by).email

        email_to = db.auth_user(task.created_by).email
        send_email(to=email_to, sender= auth.user.email,
                  subject="task: %s assigned to you changed" % form.vars.title, message=form.vars.description)
        redirect(URL('view_task', args=task.id))
    return locals()

def delete_post():
    if request.env.request_method=="POST":
        post_id = request.vars.id
        post = db.post(post_id)
        if post and post.created_by == me:    #ako ne e nulla i az sum avtora
            post.delete_record()
            return 'true'
    return 'false'


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()
